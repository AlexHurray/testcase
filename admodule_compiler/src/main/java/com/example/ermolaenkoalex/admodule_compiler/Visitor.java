package com.example.ermolaenkoalex.admodule_compiler;

import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeSpec;
import com.sun.source.util.Trees;
import com.sun.tools.javac.processing.JavacProcessingEnvironment;
import com.sun.tools.javac.tree.JCTree;
import com.sun.tools.javac.tree.TreeMaker;
import com.sun.tools.javac.util.Names;

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.Writer;

import javax.annotation.processing.Filer;
import javax.annotation.processing.Messager;
import javax.annotation.processing.ProcessingEnvironment;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.lang.model.util.ElementScanner7;
import javax.tools.Diagnostic;
import javax.tools.JavaFileObject;

// Partially taken from https://habr.com/ru/company/e-legion/blog/206208/
public class Visitor extends ElementScanner7<Void, Void> {

    private final Trees trees;

    private final Messager logger;

    private final Filer filer;

    private final TypeElement originElement;

    private final TreeMaker treeMaker;

    private final Names names;

    Visitor(ProcessingEnvironment env, TypeElement element) {
        super();
        trees = Trees.instance(env);
        logger = env.getMessager();
        filer = env.getFiler();
        originElement = element;
        final JavacProcessingEnvironment javacEnv = (JavacProcessingEnvironment) env;
        treeMaker = TreeMaker.instance(javacEnv.getContext());
        names = Names.instance(javacEnv.getContext());
    }

    public void brewJava() {
        final TypeSpec typeSpec = TypeSpec.classBuilder(originElement.getSimpleName() + "$$Proxy")
                .addModifiers(Modifier.ABSTRACT)
                .superclass(ClassName.get(originElement.getSuperclass()))
                .addOriginatingElement(originElement)
                .addMethod(MethodSpec.methodBuilder("onResume")
                        .addAnnotation(Override.class)
                        .addModifiers(Modifier.PROTECTED)
                        .addStatement("super.onResume()")
                        .addStatement("adModule.attach(this)")
                        .build())
                .addMethod(MethodSpec.methodBuilder("onPause")
                        .addAnnotation(Override.class)
                        .addModifiers(Modifier.PROTECTED)
                        .addStatement("super.onPause()")
                        .addStatement("adModule.detach()")
                        .build())
                .addField(FieldSpec.builder(ClassName.get("com.example.ermolaenkoalex.admodule",
                        "AdModule"),
                        "adModule",
                        Modifier.PRIVATE)
                        .initializer("new AdModule()")
                        .build())
                .build();
        final JavaFile javaFile = JavaFile.builder(originElement.getEnclosingElement().toString(), typeSpec)
                .addFileComment("Generated by Ermolaenko Alex processor, do not modify")
                .build();
        try {
            final JavaFileObject sourceFile = filer.createSourceFile(
                    javaFile.packageName + "." + typeSpec.name, originElement);
            try (final Writer writer = new BufferedWriter(sourceFile.openWriter())) {
                javaFile.writeTo(writer);
            }
            JCTree.JCExpression selector = treeMaker.Ident(names.fromString(javaFile.packageName));
            selector = treeMaker.Select(selector, names.fromString(typeSpec.name));
            ((JCTree.JCClassDecl) trees.getTree(originElement)).extending = selector;
        } catch (IOException e) {
            logger.printMessage(Diagnostic.Kind.ERROR, e.getMessage(), originElement);
        }
    }
}
